# -*-python-*-

import os
import subprocess
import platform
bn = os.path.basename
abspath = os.path.abspath

Import( "env" )

lib_env = env.Clone(F90PATH='#/build-scons/src/f90',
                    FORTRAN='gfortran', LINK='gfortran',
                    FORTRANMODDIR = '${TARGET.dir}',
                    ENV={'PATH' : os.environ['PATH']},
                    )

if platform.machine().endswith('64'):
    sources = Split("""
    pyratp.pyf
    mod_Cocnstant_ValuesF2PY.f90
    mod_Grid3DF2PY_64bit.f90
    mod_SkyvaultF2PY.f90
    mod_Vegetation_TypesF2PY.f90
    mod_Dir_InterceptionF2PY.f90
    mod_Hemi_InterceptionF2PY.f90
    mod_MicrometeoF2PY.f90
    mod_Shortwave_BalanceF2PY.f90
    mod_Energy_BalanceF2PY.f90
    mod_PhotosynthesisF2PY.f90
    mod_MinerPhenoF2PY.f90
    prog_RATP.f90
    """)
else:
     sources = Split("""
    pyratp.pyf
    mod_Cocnstant_ValuesF2PY.f90
    mod_Grid3DF2PY.f90
    mod_SkyvaultF2PY.f90
    mod_Vegetation_TypesF2PY.f90
    mod_Dir_InterceptionF2PY.f90
    mod_Hemi_InterceptionF2PY.f90
    mod_MicrometeoF2PY.f90
    mod_Shortwave_BalanceF2PY.f90
    mod_Energy_BalanceF2PY.f90
    mod_PhotosynthesisF2PY.f90
    mod_MinerPhenoF2PY.f90
    prog_RATP.f90
    """)


#objs = env.Object(sources)
#wrapper_src = env.F2py('pyRATP_module.c', sources)
#lib = lib_env.ALEAWrapper( 'pyratp', sources+wrapper_src )
#exe = lib_env.ALEAProgram('pyratp', 'main.cpp', LIBS='pyratp')


def f2py_builder(target=None, source=None, env=None):
    global sources
    my_sources = [abspath(str(f)) for f in source]
    mydir = abspath(os.getcwd())
    os.chdir(str(target[0].dir))
    f2py_str = 'f2py.py' if os.name == 'nt' else 'f2py'
    if os.name == 'nt':

      f2py_pyf = [f2py_str, '-m pyratp','--overwrite-signature', '-h']+sources
      f2py_cmd = [f2py_str, '-c','--build-dir .', '--compiler=%s'%('mingw32',), '--fcompiler=gnu95']+sources
    else:
      f2py_pyf = [f2py_str, '-m pyratp', '--debug-capi', '--overwrite-signature', '-h']+sources
      f2py_cmd = [f2py_str, '-c', '--debug', '', '--fcompiler=%s'%(lib_env['FORTRAN'])]+sources

    q = subprocess.Popen(" ".join(f2py_pyf), shell = True,
                          stdout = subprocess.PIPE, stderr = subprocess.PIPE)
    p = subprocess.Popen(" ".join(f2py_cmd), shell = True,
                          stdout = subprocess.PIPE, stderr = subprocess.PIPE)
    for i in q.stdout.readlines():
        print "F2PY: ", i.rstrip("\n")
    for i in q.stderr.readlines():
        print "F2PY: ", i.rstrip("\n")
    for i in p.stdout.readlines():
        print "F2PY: ", i.rstrip("\n")
    for i in p.stderr.readlines():
        print "F2PY: ", i.rstrip("\n")

    os.chdir(mydir)


ext='pyd' if os.name == 'nt' else 'so'
bld = Builder(action= f2py_builder, suffix=ext)
lib_env.Append(BUILDERS={'MyF2py':bld})

bld = lib_env.MyF2py('pyratp',sources)
Alias('build', bld)

lib = lib_env.Install("#/src/alinea/pyratp", bld)
Alias("install_lib", lib)
Alias("install", lib)


#Alias('build',lib_env.Install('#/src/alinea/pyratp',bld))

#
# Add an action to move any module files
#
"""
def moveModFiles(target=None, source=None, env=None):
    import glob, os, os.path
    targetdir = target[0].dir
    for t in target:
        if t.name[-4:] == '.mod':
            os.rename(t.name,os.path.join(str(targetdir),t.name))

env.AddPostAction(objs, moveModFiles)
"""
